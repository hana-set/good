#--------- 정상시계열로 변환되었는지 확인하기 ------#
adfTest(data_sqrt_diff1_S) # adf test
pp.test(data_sqrt_diff1_S)
#--------- 정상시계열로 변환되었는지 확인하기 ------#
adfTest(data_sqrt_diff1_S) # adf test
pp.test(data_sqrt_diff1_S)
```{r}
#--------- 정상시계열로 변환되었는지 확인하기 ------#
adfTest(data_sqrt_diff1_S) # adf test
pp.test(data_sqrt_diff1_S)
```
- adf,pp test 의 결과 둘다 정상시계열임을 알 수 있었다.
```{r}
#--------- 예비모델 선정을 위한 참고 -------------#
auto.arima(data_sqrt_diff1_S)
#--------- 예비모델 선정을 위한 참고 -------------#
auto.arima(data_sqrt_diff1_S)
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_1)
#----------- 최종 데이터 변환(예비모델 생성) --------#
data_1 <- data_sqrt_diff1_S
#------------- acf / pacf -------------------------#
par(mfrow=c(1,1))
acf(data_1,main="ACF", lag=36)
pacf(data_1,main="PACF", lag=36)
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_1)
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
fit
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
fit
#예비모델
fit_not <-arima(data_sqrt,c(1,1,0), seasonal=list(order=c(0,1,1),period=12))
fit_not
#예비모델
fit_not2 <-arima(data_sqrt,c(1,1,1), seasonal=list(order=c(0,1,1),period=12))
fit_not2
#----------------모델의 진단--------------------#
tsdiag(fit)
#-------------- 모델의 예측 -----------------#
#원데이터의에 대한 12개의 예측치를 예측
pred<-predict(fit, n.ahead=12)
predict(fit, n.ahead=12)
pred
x<-1/(pred$pred)^2
answer<-c(x)
answer
par(mfrow=c(1,1))
ts.plot(data, 1/(pred$pred)^2, lty=c(1,3))
#----------------- 최종값 ------------------#
answer
# Consider the qcement data beginning in 1988
cement <- window(qcement, start=1988)
# Use 20 years of the qcement data beginning in 1988
train <- window(cement, end=c(2007,4))
fit.arima <- auto.arima(train)
fit.arima
checkresiduals(fit.arima)
(fit.ets <- ets(train))
fit.ets
fit.ets
(fit.ets <- ets(train))
checkresiduals(fit.ets)
a1 <- fit.arima %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a1
a2 <- fit.ets %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a2
cement %>% ets() %>% forecast(h=12) %>% autoplot()
(fit.ets <- ets(train))
checkresiduals(fit.ets)
a1 <- fit.arima %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a1
a2 <- fit.ets %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a2
a2 <- fit.ets %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a2
```{r}
cement %>% ets() %>% forecast(h=12) %>% autoplot()
#--------- 예비모델 선정을 위한 참고 -------------#
auto.arima(data_sqrt_diff1_S)
#--------- 예비모델 선정을 위한 참고 -------------#
auto.arima(data_sqrt_diff1_S)
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_1)
#--------- 예비모델 선정을 위한 참고 -------------#
auto.arima(data_sqrt_diff1_S)
#------------- acf / pacf -------------------------#
par(mfrow=c(1,1))
acf(data_1,main="ACF", lag=36)
pacf(data_1,main="PACF", lag=36)
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_1)
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_1)
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-Arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
fit
#----------------모델의 진단--------------------#
tsdiag(fit)
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-Arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_1)
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-Arima(data_sqrt,c(0,0,1), seasonal=list(order=c(0,0,1),period=12))
fit
#----------------모델의 진단--------------------#
tsdiag(fit)
#----------------모델의 진단--------------------#
tsdiag(fit)
fit
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_1)
data_sqrt
#-------------- 모델의 예측 -----------------#
#원데이터의에 대한 12개의 예측치를 예측
pred<-predict(fit, n.ahead=12)
predict(fit, n.ahead=12)
pred
x<-1/(pred$pred)^2
answer<-c(x)
answer
par(mfrow=c(1,1))
ts.plot(data, 1/(pred$pred)^2, lty=c(1,3))
# Chunk 13
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-Arima(data_sqrt,c(0,0,1), seasonal=list(order=c(0,0,1),period=12))
fit
#----------------모델의 진단--------------------#
tsdiag(fit)
#1. 표준화된 잔차가 -3~3 정도면 괜찮다.
#2 ACF 는 독립이여야하니까 0을 제외하고 다 0boundary 안에 있어야 한다.
#3 P-VALUE 계산시 모두 0.05 이상이다
#-> 즉 선택해도 상관 없겠네~
#-------------- 모델의 예측 -----------------#
#원데이터의에 대한 12개의 예측치를 예측
pred<-predict(fit, n.ahead=12)
predict(fit, n.ahead=12)
pred
x<-1/(pred$pred)^2
answer<-c(x)
answer
par(mfrow=c(1,1))
ts.plot(data, 1/(pred$pred)^2, lty=c(1,3))
#----------------- 최종값 ------------------#
answer
# Chunk 14
# Consider the qcement data beginning in 1988
cement <- window(qcement, start=1988)
# Use 20 years of the qcement data beginning in 1988
train <- window(cement, end=c(2007,4))
fit.arima <- auto.arima(train)
fit.arima
checkresiduals(fit.arima)
# Chunk 15
(fit.ets <- ets(train))
checkresiduals(fit.ets)
# Chunk 16
a1 <- fit.arima %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a1
# Chunk 17
a2 <- fit.ets %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a2
# Chunk 18
cement %>% ets() %>% forecast(h=12) %>% autoplot()
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-Arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
fit
#----------------모델의 진단--------------------#
tsdiag(fit)
#-------------- 모델의 예측 -----------------#
#원데이터의에 대한 12개의 예측치를 예측
pred<-predict(fit, n.ahead=12)
predict(fit, n.ahead=12)
pred
x<-1/(pred$pred)^2
answer<-c(x)
answer
par(mfrow=c(1,1))
ts.plot(data, 1/(pred$pred)^2, lty=c(1,3))
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_sqrt)
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_sqrt)
autoplot(uschange[,"Consumption"]) +
xlab("연도") + ylab("분기별 백분율 변화")
fit <- auto.arima(uschange[,"Consumption"], seasonal=FALSE)
fit <- auto.arima(uschange[,"Consumption"], seasonal=FALSE)
fit <- auto.arima(uschange[,"Consumption"], seasonal=FALSE)
fit <- auto.arima(uschange[,"Consumption"], seasonal=FALSE)
fit
fit %>% forecast(h=10) %>% autoplot(include=80) +
ggtitle("0이 아닌 평균을 가지는 ARIMA(2,0,2)로부터 얻은 예측값") + ylab("소비")
fit %>% forecast(h=10) %>% autoplot(include=80) +
ggtitle("0이 아닌 평균을 가지는 ARIMA(1,0,3)로부터 얻은 예측값") + ylab("소비")
forecast(fit)
coef(fit)
fit
coef(fit)
forcast(fit)
forecast(fit)
![images](./Images/TS_Auto arima.png)
```{r}
fit %>% forecast(h=10) %>% autoplot(include=80) +
ggtitle("0이 아닌 평균을 가지는 ARIMA(1,0,3)로부터 얻은 예측값") + ylab("소비")
```
uschange[,"Consumption"]
coef(fit) # 계수
fit
Arima(uschange[,"Consumption"],order=c(1,0,3))
Arima(uschange[,"Consumption"],order=c(1,0,3))
fit
Arima(uschange[,"Consumption"],order=c(2,0,2))
fit %>% forecast(h=10) %>% autoplot(include=80) +
ggtitle("0이 아닌 평균을 가지는 ARIMA(1,0,3)로부터 얻은 예측값") + ylab("소비")
fit %>% forecast(h=10) %>% autoplot(include=80) +
ggtitle("0이 아닌 평균을 가지는 ARIMA(1,0,3)로부터 얻은 예측값") + ylab("소비")
fit %>% forecast(h=10) %>% autoplot(include=80) +
ggtitle("0이 아닌 평균을 가지는 ARIMA(1,0,3)로부터 얻은 예측값") + ylab("소비")
```{r}
coef(fit) # 계수
forecast(fit) # 예측
checkresiduals(fit)
autoplot(forecast(fit))
autoplot(forecast(fit))
autoplot(euretail) + ylab("소매 지수") + xlab("연도")
auto.arima(euretail)
```{r}
autoplot(euretail) + ylab("소매 지수") + xlab("연도")
autoplot(euretail) + ylab("소매 지수") + xlab("연도")
```{r}
auto.arima(euretail)
#scv 파일 읽기
data <- read.csv("Data/Timedata.csv",header=FALSE)
autoplot(euretail) + ylab("소매 지수") + xlab("연도")
auto.arima(euretail)
#scv 파일 읽기
data <- read.csv("Data/Timedata.csv",header=FALSE)
head(data)
#scv 파일 읽기
data <- read.csv("Data/Timedata.csv",header=FALSE)
head(data)
#-------------- 라이브러리 ---------------#
library(tseries)
library(fUnitRoots)
library(forecast)
# 주기를 가지는듯 하므로 주기가 12인 데이터로 만들자.
data_1 <- ts(data) # 나중에 그래프 그릴떄 필요
data<-ts(data,frequency = 12) # 월별 데이터일때, 즉 주기가 12
#-----------------그래프 그려보기 ---------------#
# 계설성 확인하기 (이떄는 12)
plot(data_1,xaxt = "n")
axis(1, at = seq(12, 108, by = 12))
# 계절성 / 추세 나누는 그래프
plot(stl(data[,1], s.window="periodic"))
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=20, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=40, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=40, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=5, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=13, s.window=13, robust=TRUE) %>%
autoplot()
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
?stl
#scv 파일 읽기
data <- read.csv("Data/Timedata.csv",header=FALSE)
head(data)
#-------------- 라이브러리 ---------------#
library(tseries)
library(fUnitRoots)
library(forecast)
# 주기를 가지는듯 하므로 주기가 12인 데이터로 만들자.
data_1 <- ts(data) # 나중에 그래프 그릴떄 필요
data<-ts(data,frequency = 12) # 월별 데이터일때, 즉 주기가 12
#-----------------그래프 그려보기 ---------------#
# 계설성 확인하기 (이떄는 12)
plot(data_1,xaxt = "n")
axis(1, at = seq(12, 108, by = 12))
# 계절성 / 추세 나누는 그래프
plot(stl(data[,1], s.window="periodic"))
#------------ ACF/PACF 로 비정상 데이터임을 확인하기 ------#
acf(data,main="ACF", lag=36)
pacf(data,main="PACF", lag=36)
#-----------------분산안정화----------------#
data_sqrt<-1/sqrt(data)
ts.plot(data_sqrt)
#-----------------추세 정상화를 위한 차분하기-------------------#
data_sqrt_diff1 <- diff(data_sqrt, difference = 1)
data_sqrt_diff2 <- diff(data_sqrt, difference = 2)
par(mfrow=c(3,1))
plot.ts(data_sqrt)
plot.ts(data_sqrt_diff1)    # 1차차분 선정
plot.ts(data_sqrt_diff2)
#------------------ 계절 차분하기 ---------------#
data_sqrt_diff1_S<-diff(data_sqrt_diff1, lag=12)
par(mfrow=c(1,1))
plot.ts(data_sqrt_diff1_S)
#--------- 정상시계열로 변환되었는지 확인하기 ------#
adfTest(data_sqrt_diff1_S) # adf test
pp.test(data_sqrt_diff1_S)
#----------- 최종 데이터 변환(예비모델 생성) --------#
data_1 <- data_sqrt_diff1_S
#------------- acf / pacf -------------------------#
par(mfrow=c(1,1))
acf(data_1,main="ACF", lag=36)
pacf(data_1,main="PACF", lag=36)
acf(data_1,main="ACF", lag=36)
pacf(data_1,main="PACF", lag=36)
#-------------auto arima 적용--------------------#
# 위 acf/ pacf 를 보고 ar/ma 추정할때 참고.
auto.arima(data_sqrt)
#--------------- 모형 적합하기 -------------------#
# 예비모델 생성했을 시 FIT 이 많아진다.
#SARIMA(0,1,1)x(0,1,1) MODEL
fit<-Arima(data_sqrt,c(0,1,1), seasonal=list(order=c(0,1,1),period=12))
fit
#----------------모델의 진단--------------------#
tsdiag(fit)
#-------------- 모델의 예측 -----------------#
#원데이터의에 대한 12개의 예측치를 예측
pred<-predict(fit, n.ahead=12)
predict(fit, n.ahead=12)
pred
pred
x<-1/(pred$pred)^2
answer<-c(x)
answer
par(mfrow=c(1,1))
ts.plot(data, 1/(pred$pred)^2, lty=c(1,3))
#----------------- 최종값 ------------------#
answer
# Consider the qcement data beginning in 1988
cement <- window(qcement, start=1988)
# Use 20 years of the qcement data beginning in 1988
train <- window(cement, end=c(2007,4))
fit.arima <- auto.arima(train)
fit.arima
checkresiduals(fit.arima)
(fit.ets <- ets(train))
checkresiduals(fit.ets)
a1 <- fit.arima %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a1
a2 <- fit.ets %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a2
cement %>% ets() %>% forecast(h=12) %>% autoplot()
cement %>% auto.arima() %>% forecast(h=12) %>% autoplot()
cement %>% ets() %>% forecast(h=12) %>% autoplot()
cement %>% auto.arima() %>% forecast(h=12) %>% autoplot()
a2 <- fit.ets %>% forecast(h = 4*(2013-2007)+1) %>%
accuracy(qcement)
a2
library(fpp2)
autoplot(uschange[,"Consumption"]) +
xlab("연도") + ylab("분기별 백분율 변화")
# jekyll 블로그 디렉토리 설정
base <- "C:/Users/goran/Desktop/Git_Hub/Blog_Git/hana-dool.github.io"
# Rmd 파일이 저장된 디렉토리 지정
rmds <- "C:/Users/goran/Desktop/Git_Hub/R/R"
setwd(base)
# 파일 이름 지정
filename <- "Anal_TS_Base"
# 폴더 경로들 지정
figs.path <- "assets/images/" # 이미지가 들갈 폴더을 지정
posts.path <- "_posts/R/" # 포스트가 들어갈 폴더 지정
# Rmd -> md 변환
require(knitr)
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
### 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
### suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
### 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
# 파일 이름 지정
filename <- "Anal_TS_Base.Rmd"
# 폴더 경로들 지정
figs.path <- "assets/images/" # 이미지가 들갈 폴더을 지정
posts.path <- "_posts/R/" # 포스트가 들어갈 폴더 지정
# Rmd -> md 변환
require(knitr)
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
### 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
### suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
### 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
# jekyll 블로그 디렉토리 설정
base <- "C:/Users/goran/Desktop/Git_Hub/Blog_Git/hana-dool.github.io"
# Rmd 파일이 저장된 디렉토리 지정
rmds <- "C:/Users/goran/Desktop/Git_Hub/R/R"
setwd(base)
# 파일 이름 지정
filename <- "Anal_TS_Simple-exponential-smoothing.Rmd"
# 폴더 경로들 지정
figs.path <- "assets/images/" # 이미지가 들갈 폴더을 지정
posts.path <- "_posts/R/" # 포스트가 들어갈 폴더 지정
# Rmd -> md 변환
require(knitr)
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
### 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
### suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
### 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
# 파일 이름 지정
filename <- "Anal_TS_Simple-exponential-smoothing.Rmd"
# 폴더 경로들 지정
figs.path <- "assets/images/" # 이미지가 들갈 폴더을 지정
posts.path <- "_posts/R/" # 포스트가 들어갈 폴더 지정
# Rmd -> md 변환
require(knitr)
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
### 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
### suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
### 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
# 파일 이름 지정
filename <- "Anal_TS_Base.Rmd"
# 폴더 경로들 지정
figs.path <- "assets/images/" # 이미지가 들갈 폴더을 지정
posts.path <- "_posts/R/" # 포스트가 들어갈 폴더 지정
# Rmd -> md 변환
require(knitr)
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
### 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
### suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
### 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
